// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  whatsapp      String    @unique
  password      String
  name          String?
  isActive      Boolean   @default(true)
  webhookUrl    String?
  retentionDays Int       @default(30)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  messages      Message[]
  Plan          Plan      @relation(fields: [planId], references: [id])
  planId        Int       @default(1)
  ApiKeys       ApiKey[]

  @@map("users")
}

enum EStatusApiKey {
  ACTIVE
  REVOKED

  @@map("status_api_key")
}

model ApiKey {
  id        Int           @id @default(autoincrement())
  name      String?       @default(nanoid())
  hash      String        @unique @default(uuid())
  userId    Int           @map("user_id")
  status    EStatusApiKey @default(ACTIVE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  User      User          @relation(fields: [userId], references: [id])

  @@unique([userId, hash])
  @@map("api_keys")
}

model Plan {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  dailyLimit   Int      @default(0) @db.Integer
  monthlyLimit Int      @default(0) @db.Integer
  price        Decimal  @db.Decimal(10, 2)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  User         User[]

  @@map("plans")
}

model Message {
  id        String        @id @default(cuid())
  userId    Int
  to        String
  content   String
  messageId String? // ID retornado pelo Baileys
  status    MessageStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("messages")
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
}
